#!/usr/bin/ruby -w

require 'test/unit'
require 'set'


$:.unshift File.join(File.dirname(__FILE__), '..') # here is the code

require File.join(File.dirname(__FILE__), 'testdb') # and the test...
require 'mediawiki'

class TestMediawiki < Test::Unit::TestCase
  
  def setup
    @testdb = TestDB.default
    @wiki = Mediawiki::Wiki.new(@testdb, {})
    @ipwiki = Mediawiki::Wiki.new(@testdb, {:ips => true})
    @aliases = { 15 => 10, '::2' => '127.0.0.1' }
    @aliasipwiki = Mediawiki::Wiki.new(@testdb, :ips => true, 
                                       :uid_aliases => @aliases)
  end

  def filter
    ### Filter
    f1 = @wiki.filter
    # Defaults:
    assert_equal(f1.namespaces,[0].to_set)
    assert(f1.denied_users.empty?)
    assert_equal(f1.redirects, :keep)
    assert(f1.minor_edits)
    # testing deep cloning
    f2 = f1.clone
    f2.include_namespace(4)
    f2.deny_user(0)
    f2.redirects = :filter
    f2.minor_edits = false
    assert_not_same(f1.namespaces, f2.namespaces)
    assert(!f1.namespaces.include?(4))
    assert(f2.namespaces.include?(4))
    assert_not_same(f1.denied_users, f2.denied_users)
    assert_not_same(f1.denied_users, f2.denied_users)
    assert_not_same(f1.redirects, f2.redirects)
    assert_not_same(f1.minor_edits, f2.minor_edits)
  end

  def database
    # how many users should be generated by IP?
    ip_users = @testdb.revtable.find_all { |a| a[3]=='ip' }.collect { |a| a[5] }.uniq

    # There are two users more in the wiki than in the user table as
    # the system user and the default IP user are not in the table:
    assert_equal(@wiki.users.size, @testdb.usertable.size+2)
    # There should be a anonymous default user:
    assert(@wiki.user_by_id(Mediawiki::Default_IP_UID))

    # For the wiki with ip users things are different:
    # We have the users and the system user and one user for each IP.
    assert_equal(@ipwiki.users.size, 
                 @testdb.usertable.size + 1 + ip_users.length)
    # There should be no default anonymous user:
    assert(!@ipwiki.user_by_id(Mediawiki::Default_IP_UID))
    # ...but a lot dedicated ones:
    ip_users.each do |ip| 
      assert(@ipwiki.user_by_id(Mediawiki.ip2uid(ip)))
      assert(@ipwiki.user_by_name(ip))
    end

    # Now we add some aliazing:
    # We have the users and the system user and one user for each IP,
    # minus the aliases. 
    assert_equal(@aliasipwiki.users.size, 
                 @testdb.usertable.size + 1 + 
                 ip_users.length - @aliases.length)
    # There should be no default anonymous user:
    assert(!@aliasipwiki.user_by_id(Mediawiki::Default_IP_UID))
    uid_aliases = @aliasipwiki.instance_eval{@uid_aliases}
    uid_aliases.each do |k,v| 
      assert_kind_of(Integer,k)
      assert_kind_of(Integer,v)
    end
    # ...but a lot dedicated ones:
    ip_users.each do |ip|
      uid = Mediawiki.ip2uid(ip)
      assert_kind_of(Integer,uid)
      auid = uid_aliases[uid]
      if auid
        assert(@aliasipwiki.user_by_id(auid))
      else
        assert(@aliasipwiki.user_by_id(uid))
        assert(@aliasipwiki.user_by_name(ip))
      end
    end



    ns0 = @testdb.pagetable.select { |pid, ns,| ns==0 }.size
    assert_equal(@wiki.pages.size, ns0)

    @wiki.filter.include_all_namespaces
    assert_equal(@wiki.pages.size, @testdb.pagetable.size)
    assert_equal(@wiki.revisions.size, @testdb.revtable.size)

    ns = @testdb.pagetable.collect { |pid, ns,| ns }.to_set
    assert_equal(@wiki.namespaces.to_set, ns)

    @testdb.usertable.each do |i, n,|
      assert_equal(@wiki.user_by_id(i).name, n)
      assert_equal(@wiki.user_by_name(n).uid, i)
    end

    f2 = @wiki.filter.clone
    ### Genres
    assert(@wiki.page_by_id(1).has_genre?('portal'))
    assert(!@wiki.page_by_id(2).has_genre?('portal'))
    assert(@wiki.page_by_id(1).has_genre?(/^port/))
    f2.genregexp = /^port/
    assert(@wiki.pages(f2).include?(@wiki.page_by_id(1)))
    assert(!@wiki.pages(f2).include?(@wiki.page_by_id(2)))
    f2.genreinclude = false
    assert(!@wiki.pages(f2).include?(@wiki.page_by_id(1)))
    assert(@wiki.pages(f2).include?(@wiki.page_by_id(2)))

    ### Roles
    assert(@wiki.user_by_id(1).has_role?('DAU'))
    f2.roleregexp = /^Master/
    assert(@wiki.users(f2).include?(@wiki.user_by_id(1)))
    assert(!@wiki.users(f2).include?(@wiki.user_by_id(2)))
    f2.roleinclude = false
    assert(!@wiki.users(f2).include?(@wiki.user_by_id(1)))
    assert(@wiki.users(f2).include?(@wiki.user_by_id(2)))
  end

  def test_core
    filter
    database
  end

end
